
particular() -> [smp, per_performance, ber_performance, ticket7904].


smp(suite) -> [];
smp(Config)  ->
    case erlang:system_info(smp_support) of
	true ->
	    NumOfProcs = erlang:system_info(schedulers),
	    io:format("smp starting ~p workers\n",[NumOfProcs]),

            ?line Msg = {initiatingMessage, testNBAPsystem:cell_setup_req_msg()},
	    ?line ok = testNBAPsystem:compile(Config,per_bin,[optimize]),
	    
	    enc_dec(NumOfProcs,Msg,2),

	    N = 10000,

            ?line {Time1,ok} = timer:tc(?MODULE,enc_dec,[NumOfProcs,Msg, N]),
	    ?line {Time1S,ok} = timer:tc(?MODULE,enc_dec,[1, Msg, NumOfProcs * N]),

	    ?line ok = testNBAPsystem:compile(Config,ber_bin,[optimize,nif]),
            ?line {Time3,ok} = timer:tc(?MODULE,enc_dec,[NumOfProcs,Msg, N]),

	    ?line {Time3S,ok} = timer:tc(?MODULE,enc_dec,[1, Msg, NumOfProcs * N]),

            {comment,lists:flatten(
		       io_lib:format(
			 "Encode/decode time parallell with ~p cores: ~p [microsecs]~n"
			 "Encode/decode time sequential: ~p [microsecs]",
			 [NumOfProcs,Time1+Time3,Time1S+Time3S]))};
        false ->
            {skipped,"No smp support"}
    end.

per_performance(Config) ->

    ?line Msg = {initiatingMessage, testNBAPsystem:cell_setup_req_msg()},
    ?line ok = testNBAPsystem:compile(Config,per_bin,[optimize]),
    NumOfProcs = erlang:system_info(schedulers)*10,
    N = 10000,
    SmpN = lists:seq(1,round(N/NumOfProcs)),

    asn1_wrapper:encode('NBAP-PDU-Discriptions','NBAP-PDU', Msg),

    PerFun = fun() ->
		     [asn1_wrapper:encode('NBAP-PDU-Discriptions',
					  'NBAP-PDU',
					  Msg) || _I <- lists:seq(1,N)],
		     ok
	     end,

    PerSMPFun = 
	fun() ->
		pforeach(fun(_) ->
				 [asn1_wrapper:encode('NBAP-PDU-Discriptions',
						      'NBAP-PDU',
						      Msg) || _I <- SmpN]
			 end,lists:seq(1,NumOfProcs))
	end,

    ?line {TimeN,ok} = timer:tc(PerFun),
    ?line {TimeNS,ok} = timer:tc(PerSMPFun),

    ?line ok = testNBAPsystem:compile(Config,per_bin,[]),

    ?line {TimeE,ok} = timer:tc(PerFun),
    ?line {TimeES,ok} = timer:tc(PerSMPFun),

    ct:log("Seq:<br/>"
	   "Nif   : ~p (~.2f%)<br/>"
	   "Erlang: ~p (~.2f%)<br/>"
	   "Parallel:<br/>"
	   "Nif   : ~p (~.2f%)<br/>"
	   "Erlang: ~p (~.2f%)<br/>",
	   [TimeN,TimeN/TimeN*100,
	    TimeE,TimeE/TimeN*100,
	    TimeNS,TimeNS/TimeNS*100,
	    TimeES,TimeES/TimeNS*100]),

    {comment, lists:flatten(io_lib:format("Nifs are ~.2f% faster than erlang!",
					  [faster(TimeN+TimeNS,
						  TimeE+TimeES)]))}.

ber_performance(Config) ->

    ?line Msg = {initiatingMessage, testNBAPsystem:cell_setup_req_msg()},
    ?line ok = testNBAPsystem:compile(Config,ber_bin,[optimize,nif]),
    NumOfProcs = erlang:system_info(schedulers)*10,
    N = 10000,
    SmpN = lists:seq(1,round(N/NumOfProcs)),

    {ok,B} = asn1_wrapper:encode('NBAP-PDU-Discriptions','NBAP-PDU', Msg),

    BerFun = fun() ->
		     [asn1_wrapper:decode(
			'NBAP-PDU-Discriptions',
			'NBAP-PDU',
			B) || _I <- lists:seq(1,N)],
		     ok
	     end,
    BerSMPFun = 
	fun() ->
		pforeach(fun(_) ->
				 [asn1_wrapper:decode(
				   'NBAP-PDU-Discriptions',
				   'NBAP-PDU',
				   B) || _I <- SmpN]
			 end,lists:seq(1,NumOfProcs))
	end,
    
    ?line {TimeN,ok} = timer:tc(BerFun),
    ?line {TimeNS,ok} = timer:tc(BerSMPFun),

    ?line ok = testNBAPsystem:compile(Config,ber_bin,[optimize]),

    ?line {TimeE,ok} = timer:tc(BerFun),
    ?line {TimeES,ok} = timer:tc(BerSMPFun),

    ct:log("Seq:<br/>"
	   "Nif   : ~p (~.2f%)<br/>"
	   "Erlang: ~p (~.2f%)<br/>"
	   "Parallel:<br/>"
	   "Nif   : ~p (~.2f%)<br/>"
	   "Erlang: ~p (~.2f%)<br/>",
	   [TimeN,TimeN/TimeN*100,
	    TimeE,TimeE/TimeN*100,
	    TimeNS,TimeNS/TimeNS*100,
	    TimeES,TimeES/TimeNS*100]),

    {comment, lists:flatten(io_lib:format("Nifs are ~.2f% faster than erlang!",
					  [faster(TimeN+TimeNS,
						  TimeE+TimeES)]))}.


faster(A,B) ->
    (B - A)/B * 100.

enc_dec(1, Msg, N) ->
    worker_loop(N, Msg);
enc_dec(NumOfProcs,Msg, N) ->
    pforeach(fun(_) ->
		     worker_loop(N, Msg)
	     end, [I || I <- lists:seq(1,NumOfProcs)]).

worker_loop(0, _Msg) ->
    ok;
worker_loop(N, Msg) ->
    ?line {ok,B}=asn1_wrapper:encode('NBAP-PDU-Discriptions',
				     'NBAP-PDU',
				     Msg),
    ?line {ok,_Msg}=asn1_wrapper:decode('NBAP-PDU-Discriptions',
					'NBAP-PDU',
					B),
    worker_loop(N - 1, Msg).


pforeach(Fun, List) ->
    pforeach(Fun, List, []).
pforeach(Fun, [], [{Pid,Ref}|Pids]) ->
    receive
	{'DOWN', Ref, process, Pid, normal} ->
	    pforeach(Fun, [], Pids)
    end;
pforeach(Fun, [H|T], Pids) ->
    Pid = spawn(fun() -> Fun(H) end),
    Ref = erlang:monitor(process, Pid),
    pforeach(Fun, T, [{Pid, Ref}|Pids]);
pforeach(_Fun,[],[]) ->
    ok.
    
-record('InitiatingMessage',{procedureCode,criticality,value}).
-record('Iu-ReleaseCommand',{first,second}).

ticket7904(suite) -> [];
ticket7904(Config) ->
    ?line DataDir = ?config(data_dir,Config),
    ?line OutDir = ?config(priv_dir,Config),

    ?line ok = asn1ct:compile(DataDir ++ 
		      "RANAPextract1",[per_bin,optimize,{outdir,OutDir}]),

    Val1 = #'InitiatingMessage'{procedureCode=1,
				criticality=ignore,
				value=#'Iu-ReleaseCommand'{
				  first=13,
				  second=true}},

    ?line {ok,_} = 'RANAPextract1':encode('InitiatingMessage', Val1),
    asn1rt:unload_driver(),
    ?line {ok,_} = 'RANAPextract1':encode('InitiatingMessage', Val1).
